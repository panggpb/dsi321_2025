import os
import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
import s3fs
from datetime import datetime
from zoneinfo import ZoneInfo
from openai import OpenAI
from langchain.prompts import PromptTemplate

# --- LakeFS Settings ---
lakefs_endpoint = os.getenv("LAKEFS_ENDPOINT", "http://lakefs-dev:8000")
ACCESS_KEY = os.getenv("LAKEFS_ACCESS_KEY")
SECRET_KEY = os.getenv("LAKEFS_SECRET_KEY")

fs = s3fs.S3FileSystem(
    key=ACCESS_KEY,
    secret=SECRET_KEY,
    client_kwargs={'endpoint_url': lakefs_endpoint}
)

@st.cache_data()
def load_data():
    path = "s3://air-quality/main/airquality.parquet/year=2025"
    files = fs.glob(f"{path}/*/*/*/*")
    df = pd.concat([pd.read_parquet(f"s3://{f}", engine="pyarrow", filesystem=fs) for f in files], ignore_index=True)
    df['lat'] = pd.to_numeric(df['lat'], errors='coerce')
    df['long'] = pd.to_numeric(df['long'], errors='coerce')
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df['PM25.aqi'] = df['PM25.aqi'].mask(df['PM25.aqi'] < 0, pd.NA)
    df['PM25.aqi'] = df.groupby('stationID')['PM25.aqi'].transform(lambda x: x.fillna(method='ffill'))
    return df.drop_duplicates()

# Typhoon API Setup
typhoon_token = "sk-Rl48oPMyO4lVARDGidyzc8tZLBQQxzNdxtXFQWJrDxJOx1j8"
client = OpenAI(
    api_key=typhoon_token,
    base_url='https://api.opentyphoon.ai/v1'
)

typhoon_prompt = PromptTemplate(
    input_variables=["context"],
    template="""
    ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏° ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á:
    
    {context}

    üìå Executive Summary
    üîç Key Insights
    ‚ö†Ô∏è Policy Recommendations
    üìà Trend Forecast
    """
)

def generate_insight(summary):
    prompt = typhoon_prompt.format(context=summary)
    response = client.chat.completions.create(
        model="typhoon-v2-70b-instruct",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=2048,
        temperature=0.7,
    )
    return response.choices[0].message.content

# --- Streamlit UI Setup ---
st.set_page_config("Air Quality Insights", layout="wide")
st.title("‚òÅÔ∏è Interactive Air Quality Dashboard")

st.caption(f"Updated: {datetime.now(ZoneInfo('Asia/Bangkok')).strftime('%Y-%m-%d %H:%M:%S')}")
df = load_data()

stations = sorted(df['nameTH'].dropna().unique().tolist())
stations.insert(0, "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

with st.container():
    col1, col2, col3 = st.columns([1, 1, 2])
    start_date = col1.date_input("üìÖ Start Date", df['timestamp'].min().date())
    end_date = col2.date_input("üìÖ End Date", df['timestamp'].max().date())
    station = col3.selectbox("üè¢ Select Station", stations)

filtered = df.copy()
filtered = filtered[(filtered['timestamp'].dt.date >= start_date) & (filtered['timestamp'].dt.date <= end_date)]
if station != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    filtered = filtered[filtered['nameTH'] == station]

if filtered.empty:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    st.stop()

# --- KPI Cards ---
k1, k2, k3 = st.columns(3)
k1.metric("üå°Ô∏è PM2.5 AQI ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{filtered['PM25.aqi'].mean():.2f}")
k2.metric("üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ AQI ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", filtered.groupby('nameTH')['PM25.aqi'].mean().idxmax())
k3.metric("üóìÔ∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", f"{len(filtered)} records")

# --- Charts ---
st.subheader("üåè PM2.5 Map")
map_df = filtered.groupby(['stationID', 'nameTH', 'lat', 'long'], as_index=False)['PM25.aqi'].mean()
fig_map = px.scatter_geo(
    map_df,
    lat='lat', lon='long', color='PM25.aqi',
    hover_name='nameTH',
    title='‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ PM2.5 ‡∏£‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ',
    color_continuous_scale='Plasma',
    projection='natural earth'
)
st.plotly_chart(fig_map, use_container_width=True)

st.subheader("üìà AQI Timeline")
if station == "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    top_stations = filtered.groupby('nameTH')['PM25.aqi'].mean().nlargest(5).index
    df_top = filtered[filtered['nameTH'].isin(top_stations)]
    fig_line = px.line(df_top.sort_values("timestamp"), x='timestamp', y='PM25.aqi', color='nameTH')
else:
    fig_line = px.line(filtered.sort_values("timestamp"), x='timestamp', y='PM25.aqi', title=f"‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° AQI - {station}")
st.plotly_chart(fig_line, use_container_width=True)

# --- LLM Insight ---
st.divider()
st.subheader("üí° AI Insight Generator")

if st.button("Generate Insight with Typhoon AI"):
    summary = filtered.describe(include='all').to_string()
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
        insight = generate_insight(summary)
        st.success("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
        st.markdown(f"""
        <div style='padding: 1rem; background-color: #eef2f6; border-left: 5px solid #4f46e5; border-radius: 8px;'>
        <h4>üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</h4>
        <div>{insight}</div>
        </div>
        """, unsafe_allow_html=True)
